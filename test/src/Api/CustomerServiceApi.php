<?php
/**
 * CustomerServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Justapnet\Justap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
    * Justap API
    *
    * 欢迎阅读 Justap Api 文档  Justap 是为移动端应用和PC端应用打造的下一代聚合支付SAAS服务平台，通过一个 SDK 即可快速的支持各种形式的应用，并且一次接口完成多个不同支付渠道的接入。平台除了支持服务商子商户模式，同时还对商家自有商户（即自己前往微信、支付宝等机构开户）提供了完整的支持。  感谢您的支持，我们将不断探索，为您提供更优质的服务！如需技术支持可前往商户中心提交工单，支持工程师会尽快与您取得联系！  # 文档说明 采用 REST 风格设计。所有接口请求地址都是可预期的以及面向资源的。使用规范的 HTTP 响应代码来表示请求结果的正确或错误信息。使用 HTTP 内置的特性，如 HTTP Authentication 和 HTTP 请求方法让接口易于理解。  ## HTTP 状态码 HTTP 状态码可以用于表明服务的状态。服务器返回的 HTTP 状态码遵循 [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) 和 [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 标准。  ## 认证 在调用 API 时，必须提供 API Key 作为每个请求的身份验证。你可以在管理平台内管理你的 API Key。API Key 是商户在系统中的身份标识，请安全存储，确保其不要被泄露。如需获取或更新 API Key ，也可以在商户中心内进行操作。 Api Key 在使用自定义的 HTTP Header 进行传递。  ``` X-Justap-Api-Key ```  API Key 分为 live 和 test 两种模式。分别对应真实交易环境和模拟测试交易环境并且可以实时切换。 测试模式下的 API Key 会模拟交易等请求，但是不会产生任何真实交易行为和费用，便于调试和接入。  **⚠️ 注意**：在使用 live 模式前，需要先前往 `商户中心 -> 应用设置 -> 开发参数` 开启 live 模式。  <SecurityDefinitions />  ## 请求类型 所有的 API 请求只支持 HTTPS 方式调用。  ## 路由参数 路由参数是指出现在 URL 路径中的可变变量。在本文档中，使用 `{}` 包裹的部分。 例如： `{charge_id}`，在实际使用是，需要将 `{charge_id}` 替换为实际值 `charge_8a8sdf888888`  ## MIME Type MIME 类型用于指示服务器返回的数据格式。服务器目前默认采用 `application/json`。  例如: ``` application/json ```  ## 错误 服务器使用 HTTP 状态码 (status code) 来表明一个 API 请求的成功或失败状态。返回 HTTP 2XX 表明 API 请求成功。返回 HTTP 4XX 表明在请求 API 时提供了错误信息，例如参数缺失、参数错误、支付渠道错误等。返回 HTTP 5XX 表明 API 请求时，服务器发生了错误。 在返回错误的状态码时，回同时返回一些错误信息提示出错原因。  具体的错误码我们正在整理当中。  ## 分页 所有的 Justap 资源都可以被 list API 方法支持，例如分页 charges 和 refunds。这些 list API 方法拥有相同的数据结构。Justap 是基于 cursor 的分页机制，使用参数 starting_after 来决定列表从何处开始，使用参数 ending_before 来决定列表从何处结束。  ## 参数说明 请求参数中包含的以下字段释义请参考：  - REQUIRED: 必填参数 - OPTIONAL: 可选参数，可以在请求当前接口时按需传入 - CONDITIONAL: 在某些条件下必传 - RESPONSE-ONLY: 标示该参数仅在接口返回参数中出现，调用 API 时无需传入  # 如何保证幂等性 如果发生请求超时或服务器内部错误，客户端可能会尝试重发请求。您可以在请求中设置 ClientToken 参数避免多次重试带来重复操作的问题。  ## 什么是幂等性 在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或多次请求中具有同样效果的作用。幂等性是在分布式系统设计中具有十分重要的地位。  ## 保证幂等性 通常情况下，客户端只需要在500（InternalErrorInternalError）或503（ServiceUnavailable）错误，或者无法获取响应结果时重试。充实时您可以从客户端生成一个参数值不超过64个的ASCII字符，并将值赋予 ClientToken，保证重试请求的幂等性。  ## ClientToken 详解 ClientToken参数的详细信息如下所示。  - ClientToken 是一个由客户端生成的唯一的、大小写敏感、不超过64个ASCII字符的字符串。例如，`ClientToken=123e4567-e89b-12d3-a456-426655440000`。 - 如果您提供了一个已经使用过的 ClientToken，但其他请求参数**有变化**，则服务器会返回 IdempotentParameterMismatch 的错误代码。 - 如果您提供了一个已经使用过的 ClientToken，且其他请求参数**不变**，则服务器会尝试返回 ClientToken 对应的记录。  ## API列表 以下为部分包含了 ClientToken 参数的API，供您参考。具体哪些API支持 ClientToken 参数请以各 API 文档为准，此处不一一列举。  - [申请退款接口](https://www.justap.cn/docs#operation/TradeService_Refunds)  # 签名 为保证安全，JUSTAP 所有接口均需要对请求进行签名。服务器收到请求后进行签名的验证。如果签名验证不通过，将会拒绝处理请求，并返回 401 Unauthorized。  签名算法：  ``` base64Encode(hamc-sha256(md5(请求 body + 请求时间戳 + 一次性随机字符串) + 一次性随机字符串)) ```  ## 准备 首先需要在 Justap 创建一个应用，商户需要生成一对 RSA 密钥对，并将公钥配置到 `商户中心 -> 开发配置`。 RSA 可以使用支付宝提供的 [密钥生成工具](https://opendocs.alipay.com/common/02kipl) 来生成。  商户在使用时，可以按照下述步骤生成请求的签名。   ## 算法描述: - 在请求发送前，取完整的**请求 body** - 生成一个随机的32位字符串，得到 **一次性随机字符串** - 获取当前时间的时间戳，得到 **请求时间戳** - 在请求字符串后面拼接上 **请求时间戳** 和 **一次性随机字符串**，得到 **待 Hash 字符串** - 对 **待 Hash 字符串** 转换为 utf8 编码并计算 md5，得到 **待签名字符串** - **待签名字符串** 后面拼接上 一次性随机字符串，得到完整的 **待签名字符串** - 使用商户 RSA 私钥，对 **待签名字符串** 计算签名，并对 结果 进行 base64 编码，即可得到 **签名**  ## 设置HTTP头 Justap 要求请求通过 自定义头部 来传递签名。具体定义如下:  ``` X-Justap-Signature: 签名 X-Justap-Request-Time: 请求时间戳 X-Justap-Nonce: 一次性随机字符串 X-Justap-Body-Hash: 待签名字符串 ```  具体的签名算法实现，可参考我们提供的各语言 SDK。  # WebHooks
    *
* OpenAPI spec version: 1.0
* Contact: support@justap.net
* Generated by: https://github.com/swagger-api/swagger-codegen.git
* Swagger Codegen version: 2.4.28-SNAPSHOT
*/

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Justapnet\Justap\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Justapnet\Justap\ApiException;
use Justapnet\Justap\Configuration;
use Justapnet\Justap\HeaderSelector;
use Justapnet\Justap\ObjectSerializer;

/**
 * CustomerServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Justapnet\Justap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customerServiceCreateCustomer
     *
     * @param  \Justapnet\Justap\Model\V1CreateCustomerRequest $body body (required)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Justapnet\Justap\Model\V1CustomerResponse
     */
    public function customerServiceCreateCustomer($body)
    {
        list($response) = $this->customerServiceCreateCustomerWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation customerServiceCreateCustomerWithHttpInfo
     *
     * @param  \Justapnet\Justap\Model\V1CreateCustomerRequest $body (required)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Justapnet\Justap\Model\V1CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerServiceCreateCustomerWithHttpInfo($body)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerResponse';
        $request = $this->customerServiceCreateCustomerRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\V1CustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerServiceCreateCustomerAsync
     *
     * 
     *
     * @param  \Justapnet\Justap\Model\V1CreateCustomerRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceCreateCustomerAsync($body)
    {
        return $this->customerServiceCreateCustomerAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerServiceCreateCustomerAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Justapnet\Justap\Model\V1CreateCustomerRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceCreateCustomerAsyncWithHttpInfo($body)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerResponse';
        $request = $this->customerServiceCreateCustomerRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerServiceCreateCustomer'
     *
     * @param  \Justapnet\Justap\Model\V1CreateCustomerRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerServiceCreateCustomerRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customerServiceCreateCustomer'
            );
        }

        $resourcePath = '/v1/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-JUSTAP-API-KEY');
        if ($apiKey !== null) {
            $headers['X-JUSTAP-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        // signature
        $dataToBeSign = "";
        $dataToBeSign .= $httpBody;
        $requestTime = time();
        $dataToBeSign .= $requestTime;
        $nonceStr = rand_chars(32);
        $dataToBeSign .= $nonceStr;

        $bodyMd5 = md5($dataToBeSign);

        $signResult = openssl_sign($bodyMd5.$nonceStr, $requestSignature, $this->config->getPrivateKey(), 'sha256');
        if (!$signResult) {
            throw new \Exception("Generate signature failed");
        }
        $headers['X-Justap-Signature'] = base64_encode($requestSignature);
        $headers['X-Justap-Request-Time'] = $requestTime;
        $headers['X-Justap-Nonce'] = $nonceStr;
        $headers['X-Justap-Body-Hash'] = $bodyMd5;
        // end signature

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerServiceDeleteCustomer
     *
     * @param  string $id id (required)
     * @param  string $app_id app_id (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Justapnet\Justap\Model\V1DeleteCustomerResponse
     */
    public function customerServiceDeleteCustomer($id, $app_id = null)
    {
        list($response) = $this->customerServiceDeleteCustomerWithHttpInfo($id, $app_id);
        return $response;
    }

    /**
     * Operation customerServiceDeleteCustomerWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Justapnet\Justap\Model\V1DeleteCustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerServiceDeleteCustomerWithHttpInfo($id, $app_id = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1DeleteCustomerResponse';
        $request = $this->customerServiceDeleteCustomerRequest($id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\V1DeleteCustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerServiceDeleteCustomerAsync
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceDeleteCustomerAsync($id, $app_id = null)
    {
        return $this->customerServiceDeleteCustomerAsyncWithHttpInfo($id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerServiceDeleteCustomerAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceDeleteCustomerAsyncWithHttpInfo($id, $app_id = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1DeleteCustomerResponse';
        $request = $this->customerServiceDeleteCustomerRequest($id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerServiceDeleteCustomer'
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerServiceDeleteCustomerRequest($id, $app_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customerServiceDeleteCustomer'
            );
        }

        $resourcePath = '/v1/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_id !== null) {
            $queryParams['app_id'] = ObjectSerializer::toQueryValue($app_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-JUSTAP-API-KEY');
        if ($apiKey !== null) {
            $headers['X-JUSTAP-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        // signature
        $dataToBeSign = "";
        $dataToBeSign .= $httpBody;
        $requestTime = time();
        $dataToBeSign .= $requestTime;
        $nonceStr = rand_chars(32);
        $dataToBeSign .= $nonceStr;

        $bodyMd5 = md5($dataToBeSign);

        $signResult = openssl_sign($bodyMd5.$nonceStr, $requestSignature, $this->config->getPrivateKey(), 'sha256');
        if (!$signResult) {
            throw new \Exception("Generate signature failed");
        }
        $headers['X-Justap-Signature'] = base64_encode($requestSignature);
        $headers['X-Justap-Request-Time'] = $requestTime;
        $headers['X-Justap-Nonce'] = $nonceStr;
        $headers['X-Justap-Body-Hash'] = $bodyMd5;
        // end signature

        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerServiceListAllCustomers
     *
     * @param  string $app_id app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  string $starting_after [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param  string $ending_before [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param  int $created_lt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  bool $disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Justapnet\Justap\Model\V1CustomerListResponse
     */
    public function customerServiceListAllCustomers($app_id = null, $limit = '10', $starting_after = null, $ending_before = null, $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $disabled = null)
    {
        list($response) = $this->customerServiceListAllCustomersWithHttpInfo($app_id, $limit, $starting_after, $ending_before, $created_lt, $created_lte, $created_gt, $created_gte, $disabled);
        return $response;
    }

    /**
     * Operation customerServiceListAllCustomersWithHttpInfo
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  string $starting_after [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param  string $ending_before [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param  int $created_lt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  bool $disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Justapnet\Justap\Model\V1CustomerListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerServiceListAllCustomersWithHttpInfo($app_id = null, $limit = '10', $starting_after = null, $ending_before = null, $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $disabled = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerListResponse';
        $request = $this->customerServiceListAllCustomersRequest($app_id, $limit, $starting_after, $ending_before, $created_lt, $created_lte, $created_gt, $created_gte, $disabled);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\V1CustomerListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerServiceListAllCustomersAsync
     *
     * 
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  string $starting_after [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param  string $ending_before [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param  int $created_lt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  bool $disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceListAllCustomersAsync($app_id = null, $limit = '10', $starting_after = null, $ending_before = null, $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $disabled = null)
    {
        return $this->customerServiceListAllCustomersAsyncWithHttpInfo($app_id, $limit, $starting_after, $ending_before, $created_lt, $created_lte, $created_gt, $created_gte, $disabled)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerServiceListAllCustomersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  string $starting_after [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param  string $ending_before [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param  int $created_lt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  bool $disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceListAllCustomersAsyncWithHttpInfo($app_id = null, $limit = '10', $starting_after = null, $ending_before = null, $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $disabled = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerListResponse';
        $request = $this->customerServiceListAllCustomersRequest($app_id, $limit, $starting_after, $ending_before, $created_lt, $created_lte, $created_gt, $created_gte, $disabled);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerServiceListAllCustomers'
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  string $starting_after [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param  string $ending_before [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param  int $created_lt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  bool $disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerServiceListAllCustomersRequest($app_id = null, $limit = '10', $starting_after = null, $ending_before = null, $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $disabled = null)
    {

        $resourcePath = '/v1/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_id !== null) {
            $queryParams['app_id'] = ObjectSerializer::toQueryValue($app_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($starting_after !== null) {
            $queryParams['starting_after'] = ObjectSerializer::toQueryValue($starting_after);
        }
        // query params
        if ($ending_before !== null) {
            $queryParams['ending_before'] = ObjectSerializer::toQueryValue($ending_before);
        }
        // query params
        if ($created_lt !== null) {
            $queryParams['created.lt'] = ObjectSerializer::toQueryValue($created_lt);
        }
        // query params
        if ($created_lte !== null) {
            $queryParams['created.lte'] = ObjectSerializer::toQueryValue($created_lte);
        }
        // query params
        if ($created_gt !== null) {
            $queryParams['created.gt'] = ObjectSerializer::toQueryValue($created_gt);
        }
        // query params
        if ($created_gte !== null) {
            $queryParams['created.gte'] = ObjectSerializer::toQueryValue($created_gte);
        }
        // query params
        if ($disabled !== null) {
            $queryParams['disabled'] = ObjectSerializer::toQueryValue($disabled);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-JUSTAP-API-KEY');
        if ($apiKey !== null) {
            $headers['X-JUSTAP-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        // signature
        $dataToBeSign = "";
        $dataToBeSign .= $httpBody;
        $requestTime = time();
        $dataToBeSign .= $requestTime;
        $nonceStr = rand_chars(32);
        $dataToBeSign .= $nonceStr;

        $bodyMd5 = md5($dataToBeSign);

        $signResult = openssl_sign($bodyMd5.$nonceStr, $requestSignature, $this->config->getPrivateKey(), 'sha256');
        if (!$signResult) {
            throw new \Exception("Generate signature failed");
        }
        $headers['X-Justap-Signature'] = base64_encode($requestSignature);
        $headers['X-Justap-Request-Time'] = $requestTime;
        $headers['X-Justap-Nonce'] = $nonceStr;
        $headers['X-Justap-Body-Hash'] = $bodyMd5;
        // end signature

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerServiceRetrieveCustomer
     *
     * @param  string $id id (required)
     * @param  string $app_id app_id (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Justapnet\Justap\Model\V1CustomerResponse
     */
    public function customerServiceRetrieveCustomer($id, $app_id = null)
    {
        list($response) = $this->customerServiceRetrieveCustomerWithHttpInfo($id, $app_id);
        return $response;
    }

    /**
     * Operation customerServiceRetrieveCustomerWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Justapnet\Justap\Model\V1CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerServiceRetrieveCustomerWithHttpInfo($id, $app_id = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerResponse';
        $request = $this->customerServiceRetrieveCustomerRequest($id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\V1CustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerServiceRetrieveCustomerAsync
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceRetrieveCustomerAsync($id, $app_id = null)
    {
        return $this->customerServiceRetrieveCustomerAsyncWithHttpInfo($id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerServiceRetrieveCustomerAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceRetrieveCustomerAsyncWithHttpInfo($id, $app_id = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerResponse';
        $request = $this->customerServiceRetrieveCustomerRequest($id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerServiceRetrieveCustomer'
     *
     * @param  string $id (required)
     * @param  string $app_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerServiceRetrieveCustomerRequest($id, $app_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customerServiceRetrieveCustomer'
            );
        }

        $resourcePath = '/v1/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_id !== null) {
            $queryParams['app_id'] = ObjectSerializer::toQueryValue($app_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-JUSTAP-API-KEY');
        if ($apiKey !== null) {
            $headers['X-JUSTAP-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        // signature
        $dataToBeSign = "";
        $dataToBeSign .= $httpBody;
        $requestTime = time();
        $dataToBeSign .= $requestTime;
        $nonceStr = rand_chars(32);
        $dataToBeSign .= $nonceStr;

        $bodyMd5 = md5($dataToBeSign);

        $signResult = openssl_sign($bodyMd5.$nonceStr, $requestSignature, $this->config->getPrivateKey(), 'sha256');
        if (!$signResult) {
            throw new \Exception("Generate signature failed");
        }
        $headers['X-Justap-Signature'] = base64_encode($requestSignature);
        $headers['X-Justap-Request-Time'] = $requestTime;
        $headers['X-Justap-Nonce'] = $nonceStr;
        $headers['X-Justap-Body-Hash'] = $bodyMd5;
        // end signature

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerServiceSearchCustomers
     *
     * @param  string $app_id app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  int $created_lt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  string $email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param  string $name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param  string $phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Justapnet\Justap\Model\V1CustomerListResponse
     */
    public function customerServiceSearchCustomers($app_id = null, $limit = '10', $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $email = null, $name = null, $phone = null)
    {
        list($response) = $this->customerServiceSearchCustomersWithHttpInfo($app_id, $limit, $created_lt, $created_lte, $created_gt, $created_gte, $email, $name, $phone);
        return $response;
    }

    /**
     * Operation customerServiceSearchCustomersWithHttpInfo
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  int $created_lt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  string $email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param  string $name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param  string $phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Justapnet\Justap\Model\V1CustomerListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerServiceSearchCustomersWithHttpInfo($app_id = null, $limit = '10', $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $email = null, $name = null, $phone = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerListResponse';
        $request = $this->customerServiceSearchCustomersRequest($app_id, $limit, $created_lt, $created_lte, $created_gt, $created_gte, $email, $name, $phone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\V1CustomerListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerServiceSearchCustomersAsync
     *
     * 
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  int $created_lt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  string $email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param  string $name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param  string $phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceSearchCustomersAsync($app_id = null, $limit = '10', $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $email = null, $name = null, $phone = null)
    {
        return $this->customerServiceSearchCustomersAsyncWithHttpInfo($app_id, $limit, $created_lt, $created_lte, $created_gt, $created_gte, $email, $name, $phone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerServiceSearchCustomersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  int $created_lt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  string $email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param  string $name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param  string $phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceSearchCustomersAsyncWithHttpInfo($app_id = null, $limit = '10', $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $email = null, $name = null, $phone = null)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerListResponse';
        $request = $this->customerServiceSearchCustomersRequest($app_id, $limit, $created_lt, $created_lte, $created_gt, $created_gte, $email, $name, $phone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerServiceSearchCustomers'
     *
     * @param  string $app_id (optional)
     * @param  int $limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param  int $created_lt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_lte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  int $created_gte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param  string $email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param  string $name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param  string $phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerServiceSearchCustomersRequest($app_id = null, $limit = '10', $created_lt = '0', $created_lte = '0', $created_gt = '0', $created_gte = '0', $email = null, $name = null, $phone = null)
    {

        $resourcePath = '/v1/customers/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_id !== null) {
            $queryParams['app_id'] = ObjectSerializer::toQueryValue($app_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($created_lt !== null) {
            $queryParams['created.lt'] = ObjectSerializer::toQueryValue($created_lt);
        }
        // query params
        if ($created_lte !== null) {
            $queryParams['created.lte'] = ObjectSerializer::toQueryValue($created_lte);
        }
        // query params
        if ($created_gt !== null) {
            $queryParams['created.gt'] = ObjectSerializer::toQueryValue($created_gt);
        }
        // query params
        if ($created_gte !== null) {
            $queryParams['created.gte'] = ObjectSerializer::toQueryValue($created_gte);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = ObjectSerializer::toQueryValue($phone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-JUSTAP-API-KEY');
        if ($apiKey !== null) {
            $headers['X-JUSTAP-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        // signature
        $dataToBeSign = "";
        $dataToBeSign .= $httpBody;
        $requestTime = time();
        $dataToBeSign .= $requestTime;
        $nonceStr = rand_chars(32);
        $dataToBeSign .= $nonceStr;

        $bodyMd5 = md5($dataToBeSign);

        $signResult = openssl_sign($bodyMd5.$nonceStr, $requestSignature, $this->config->getPrivateKey(), 'sha256');
        if (!$signResult) {
            throw new \Exception("Generate signature failed");
        }
        $headers['X-Justap-Signature'] = base64_encode($requestSignature);
        $headers['X-Justap-Request-Time'] = $requestTime;
        $headers['X-Justap-Nonce'] = $nonceStr;
        $headers['X-Justap-Body-Hash'] = $bodyMd5;
        // end signature

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerServiceUpdateCustomer
     *
     * @param  string $id id (required)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Justapnet\Justap\Model\V1CustomerResponse
     */
    public function customerServiceUpdateCustomer($id)
    {
        list($response) = $this->customerServiceUpdateCustomerWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customerServiceUpdateCustomerWithHttpInfo
     *
     * @param  string $id (required)
     *
     * @throws \Justapnet\Justap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Justapnet\Justap\Model\V1CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerServiceUpdateCustomerWithHttpInfo($id)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerResponse';
        $request = $this->customerServiceUpdateCustomerRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\V1CustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Justapnet\Justap\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerServiceUpdateCustomerAsync
     *
     * 
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceUpdateCustomerAsync($id)
    {
        return $this->customerServiceUpdateCustomerAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerServiceUpdateCustomerAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerServiceUpdateCustomerAsyncWithHttpInfo($id)
    {
        $returnType = '\Justapnet\Justap\Model\V1CustomerResponse';
        $request = $this->customerServiceUpdateCustomerRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerServiceUpdateCustomer'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerServiceUpdateCustomerRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customerServiceUpdateCustomer'
            );
        }

        $resourcePath = '/v1/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-JUSTAP-API-KEY');
        if ($apiKey !== null) {
            $headers['X-JUSTAP-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        // signature
        $dataToBeSign = "";
        $dataToBeSign .= $httpBody;
        $requestTime = time();
        $dataToBeSign .= $requestTime;
        $nonceStr = rand_chars(32);
        $dataToBeSign .= $nonceStr;

        $bodyMd5 = md5($dataToBeSign);

        $signResult = openssl_sign($bodyMd5.$nonceStr, $requestSignature, $this->config->getPrivateKey(), 'sha256');
        if (!$signResult) {
            throw new \Exception("Generate signature failed");
        }
        $headers['X-Justap-Signature'] = base64_encode($requestSignature);
        $headers['X-Justap-Request-Time'] = $requestTime;
        $headers['X-Justap-Nonce'] = $nonceStr;
        $headers['X-Justap-Body-Hash'] = $bodyMd5;
        // end signature

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

function rand_chars($n) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $randomString = '';

    for ($i = 0; $i < $n; $i++) {
        $index = rand(0, strlen($characters) - 1);
        $randomString .= $characters[$index];
    }

    return $randomString;
}

